
const propertyLookup = new Map();

[
	{ parent: 'layer', types: 'background,fill,line,symbol', key: 'filter', value: 'filter' },
	{ parent: 'layer', types: 'background,fill,line,symbol', key: 'maxzoom', value: 'number' },
	{ parent: 'layer', types: 'background,fill,line,symbol', key: 'minzoom', value: 'number' },

	{ parent: 'layout', types: 'background,fill,line,symbol', key: 'visibility', value: 'enum' },
	{ parent: 'layout', types: 'fill', key: 'fill-sort-key', value: 'number' },
	{ parent: 'layout', types: 'line', key: 'line-cap', value: 'enum' },
	{ parent: 'layout', types: 'line', key: 'line-join', value: 'enum' },
	{ parent: 'layout', types: 'line', key: 'line-miter-limit', value: 'number' },
	{ parent: 'layout', types: 'line', key: 'line-round-limit', value: 'number' },
	{ parent: 'layout', types: 'line', key: 'line-sort-key', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'icon-allow-overlap', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'icon-anchor', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'icon-ignore-placement', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'icon-image', short: 'image', value: 'resolvedImage' },
	{ parent: 'layout', types: 'symbol', key: 'icon-keep-upright', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'icon-offset', value: 'array' },
	{ parent: 'layout', types: 'symbol', key: 'icon-optional', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'icon-overlap', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'icon-padding', value: 'padding' },
	{ parent: 'layout', types: 'symbol', key: 'icon-pitch-alignment', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'icon-rotate', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'icon-rotation-alignment', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'icon-size', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'icon-text-fit-padding', value: 'array' },
	{ parent: 'layout', types: 'symbol', key: 'icon-text-fit', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'symbol-avoid-edges', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'symbol-placement', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'symbol-sort-key', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'symbol-spacing', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'symbol-z-order', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-allow-overlap', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'text-anchor', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-field', short: 'text', value: 'formatted' },
	{ parent: 'layout', types: 'symbol', key: 'text-font', short: 'font', value: 'fonts' },
	{ parent: 'layout', types: 'symbol', key: 'text-ignore-placement', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'text-justify', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-keep-upright', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'text-letter-spacing', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-line-height', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-max-angle', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-max-width', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-offset', value: 'array' },
	{ parent: 'layout', types: 'symbol', key: 'text-optional', value: 'boolean' },
	{ parent: 'layout', types: 'symbol', key: 'text-overlap', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-padding', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-pitch-alignment', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-radial-offset', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-rotate', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-rotation-alignment', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-size', short: 'size', value: 'number' },
	{ parent: 'layout', types: 'symbol', key: 'text-transform', value: 'enum' },
	{ parent: 'layout', types: 'symbol', key: 'text-variable-anchor-offset', value: 'variableAnchorOffsetCollection' },
	{ parent: 'layout', types: 'symbol', key: 'text-variable-anchor', value: 'array' },
	{ parent: 'layout', types: 'symbol', key: 'text-writing-mode', value: 'array' },

	{ parent: 'paint', types: 'background', key: 'background-color', short: 'color', value: 'color' },
	{ parent: 'paint', types: 'background', key: 'background-opacity', short: 'opacity', value: 'number' },
	{ parent: 'paint', types: 'background', key: 'background-pattern', short: 'image', value: 'resolvedImage' },
	{ parent: 'paint', types: 'fill', key: 'fill-antialias', value: 'boolean' },
	{ parent: 'paint', types: 'fill', key: 'fill-color', short: 'color', value: 'color' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-base', value: 'number' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-color', value: 'color' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-height', value: 'number' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-opacity', value: 'number' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-pattern', value: 'resolvedImage' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-translate-anchor', value: 'enum' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-translate', value: 'array' },
	{ parent: 'paint', types: 'fill', key: 'fill-extrusion-vertical-gradient', value: 'boolean' },
	{ parent: 'paint', types: 'fill', key: 'fill-opacity', short: 'opacity', value: 'number' },
	{ parent: 'paint', types: 'fill', key: 'fill-outline-color', value: 'color' },
	{ parent: 'paint', types: 'fill', key: 'fill-pattern', short: 'image', value: 'resolvedImage' },
	{ parent: 'paint', types: 'fill', key: 'fill-translate-anchor', value: 'enum' },
	{ parent: 'paint', types: 'fill', key: 'fill-translate', value: 'array' },
	{ parent: 'paint', types: 'line', key: 'line-blur', value: 'number' },
	{ parent: 'paint', types: 'line', key: 'line-color', short: 'color', value: 'color' },
	{ parent: 'paint', types: 'line', key: 'line-dasharray', value: 'array' },
	{ parent: 'paint', types: 'line', key: 'line-gap-width', value: 'number' },
	{ parent: 'paint', types: 'line', key: 'line-gradient', value: 'color' },
	{ parent: 'paint', types: 'line', key: 'line-offset', value: 'number' },
	{ parent: 'paint', types: 'line', key: 'line-opacity', short: 'opacity', value: 'number' },
	{ parent: 'paint', types: 'line', key: 'line-pattern', short: 'image', value: 'resolvedImage' },
	{ parent: 'paint', types: 'line', key: 'line-translate-anchor', value: 'enum' },
	{ parent: 'paint', types: 'line', key: 'line-translate', value: 'array' },
	{ parent: 'paint', types: 'line', key: 'line-width', short: 'size', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'icon-color', short: 'color', value: 'color' },
	{ parent: 'paint', types: 'symbol', key: 'icon-halo-blur', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'icon-halo-color', value: 'color' },
	{ parent: 'paint', types: 'symbol', key: 'icon-halo-width', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'icon-opacity', short: 'opacity', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'icon-translate-anchor', value: 'enum' },
	{ parent: 'paint', types: 'symbol', key: 'icon-translate', value: 'array' },
	{ parent: 'paint', types: 'symbol', key: 'text-color', short: 'color', value: 'color' },
	{ parent: 'paint', types: 'symbol', key: 'text-halo-blur', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'text-halo-color', value: 'color' },
	{ parent: 'paint', types: 'symbol', key: 'text-halo-width', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'text-opacity', short: 'opacity', value: 'number' },
	{ parent: 'paint', types: 'symbol', key: 'text-translate-anchor', value: 'enum' },
	{ parent: 'paint', types: 'symbol', key: 'text-translate', value: 'array' },
].forEach(property => {
	property.types.split(',').forEach(type => {
		add(property.key);
		if (property.short) add(property.short);

		function add(propertyKey) {
			let key = type + '/' + propertyKey;
			if (!propertyLookup.has(key)) propertyLookup.set(key, []);
			propertyLookup.get(key).push(property);
		}
	});
})

export default propertyLookup;
